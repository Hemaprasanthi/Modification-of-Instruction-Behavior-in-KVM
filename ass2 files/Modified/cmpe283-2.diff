diff --git a/arch/x86/kvm/cpuid.c b/arch/x86/kvm/cpuid.c
index 7bcfa61375c0..3d54065b2922 100644
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@ -27,6 +27,11 @@
 #include "trace.h"
 #include "pmu.h"
 
+/* variables */
+
+extern u32 counter_exits;
+extern u64 exit_delta;
+
 static u32 xstate_required_size(u64 xstate_bv, bool compacted)
 {
 	int feature_bit = 0;
@@ -945,7 +950,26 @@ int kvm_emulate_cpuid(struct kvm_vcpu *vcpu)
 
 	eax = kvm_register_read(vcpu, VCPU_REGS_RAX);
 	ecx = kvm_register_read(vcpu, VCPU_REGS_RCX);
-	kvm_cpuid(vcpu, &eax, &ebx, &ecx, &edx, true);
+        printk("Entered kvm_emulate_cpuid of cpuid.c. EAX = 0x%x\n", eax);
+	
+        /* Code  modification */
+        if (eax == 0x4fffffff)  
+        {
+      		/* new Cpuid leaf function 0x4fffffff */
+	    kvm_cpuid(vcpu, &eax, &ebx, &ecx, &edx, true);
+            
+		/* Assign variables from calculated values from vmx.c for cycles and timespent */
+            eax = counter_exits;
+            ecx = exit_delta & 0xffffffff;
+            ebx = (exit_delta >> 32) & 0xffffffff;
+            
+        }
+        else  
+        {
+	    kvm_cpuid(vcpu, &eax, &ebx, &ecx, &edx, true);
+            printk(KERN_INFO "EAX == 0x%x after kvm_cpuid()\n", eax);
+        }
+
 	kvm_register_write(vcpu, VCPU_REGS_RAX, eax);
 	kvm_register_write(vcpu, VCPU_REGS_RBX, ebx);
 	kvm_register_write(vcpu, VCPU_REGS_RCX, ecx);
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index 4555077d69ce..1bd25bd45f38 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -60,6 +60,19 @@
 #include "pmu.h"
 #include "vmx_evmcs.h"
 
+
+/* Variable init*/
+
+u32 counter_exits = 0;
+u64 exit_delta = 0;
+EXPORT_SYMBOL(counter_exits);
+EXPORT_SYMBOL(exit_delta);
+/*
+#define EXIT_VARIABLES_H
+#include "exit_variables.h"
+*/
+
+
 #define __ex(x) __kvm_handle_fault_on_reboot(x)
 #define __ex_clear(x, reg) \
 	____kvm_handle_fault_on_reboot(x, "xor " reg ", " reg)
@@ -7439,6 +7452,7 @@ static void vmx_set_dr7(struct kvm_vcpu *vcpu, unsigned long val)
 
 static int handle_cpuid(struct kvm_vcpu *vcpu)
 {
+        
 	return kvm_emulate_cpuid(vcpu);
 }
 
@@ -10512,6 +10526,12 @@ static void dump_vmcs(void)
  */
 static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 {
+    u64 start_tsc = rdtsc();
+    u64 end_tsc = 0;
+    u32 handle_return_value = 0;
+    counter_exits++;
+
+
 	struct vcpu_vmx *vmx = to_vmx(vcpu);
 	u32 exit_reason = vmx->exit_reason;
 	u32 vectoring_info = vmx->idt_vectoring_info;
@@ -10530,16 +10550,29 @@ static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 
 	/* If guest state is invalid, start emulating */
 	if (vmx->emulation_required)
+        {
+               /* calucalte the timestamp counter */
+                end_tsc = rdtsc();
+                exit_delta += end_tsc - start_tsc;
 		return handle_invalid_guest_state(vcpu);
+        }
 
 	if (is_guest_mode(vcpu) && nested_vmx_exit_reflected(vcpu, exit_reason))
+        {
+                /* calucalte the timestamp counter */
+                end_tsc = rdtsc();
+                exit_delta += end_tsc - start_tsc;
 		return nested_vmx_reflect_vmexit(vcpu, exit_reason);
+        }
 
 	if (exit_reason & VMX_EXIT_REASONS_FAILED_VMENTRY) {
 		dump_vmcs();
 		vcpu->run->exit_reason = KVM_EXIT_FAIL_ENTRY;
 		vcpu->run->fail_entry.hardware_entry_failure_reason
 			= exit_reason;
+/* calucalte the timestamp counter */
+                end_tsc = rdtsc();
+                exit_delta += end_tsc - start_tsc;
 		return 0;
 	}
 
@@ -10547,6 +10580,9 @@ static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 		vcpu->run->exit_reason = KVM_EXIT_FAIL_ENTRY;
 		vcpu->run->fail_entry.hardware_entry_failure_reason
 			= vmcs_read32(VM_INSTRUCTION_ERROR);
+/* calucalte the timestamp counter */
+                end_tsc = rdtsc();
+                exit_delta += end_tsc - start_tsc;
 		return 0;
 	}
 
@@ -10573,6 +10609,8 @@ static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 			vcpu->run->internal.data[3] =
 				vmcs_read64(GUEST_PHYSICAL_ADDRESS);
 		}
+                end_tsc = rdtsc();
+                exit_delta += end_tsc - start_tsc;
 		return 0;
 	}
 
@@ -10595,13 +10633,25 @@ static int vmx_handle_exit(struct kvm_vcpu *vcpu)
 		}
 	}
 
+      
 	if (exit_reason < kvm_vmx_max_exit_handlers
 	    && kvm_vmx_exit_handlers[exit_reason])
-		return kvm_vmx_exit_handlers[exit_reason](vcpu);
+        {
+              
+		handle_return_value =  kvm_vmx_exit_handlers[exit_reason](vcpu);
+/* calucalte the timestamp counter */
+                end_tsc = rdtsc();
+                exit_delta += end_tsc - start_tsc;
+		/* return kvm_vmx_exit_handlers[exit_reason](vcpu); */
+                return handle_return_value;
+        }
 	else {
 		vcpu_unimpl(vcpu, "vmx: unexpected exit reason 0x%x\n",
 				exit_reason);
 		kvm_queue_exception(vcpu, UD_VECTOR);
+/* calucalte the timestamp counter */
+                end_tsc = rdtsc();
+                exit_delta += end_tsc - start_tsc;
 		return 1;
 	}
 }
